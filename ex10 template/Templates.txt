1) #############


Files to turn in : Makefile, main.cpp, whatever.{h, hpp}

Implement the following function templates:
	• swap: Swaps the values of two given arguments. Does not return anything.
	• min: Compares the two values passed in its arguments and returns the smallest one.
		If the two of them are equal, then it returns the second one.
	• max: Compares the two values passed in its arguments and returns the greatest one.
		If the two of them are equal, then it returns the second one.


These functions can be called with any type of argument. The only requirement is
that the two arguments must have the same type and must support all the comparison
operators.


```
int main( void ) {
	int a = 2;
	int b = 3;
	::swap( a, b );
	std::cout << "a = " << a << ", b = " << b << std::endl;
	std::cout << "min( a, b ) = " << ::min( a, b ) << std::endl;
	std::cout << "max( a, b ) = " << ::max( a, b ) << std::endl;
	std::string c = "chaine1";
	std::string d = "chaine2";
	::swap(c, d);
	std::cout << "c = " << c << ", d = " << d << std::endl;
	std::cout << "min( c, d ) = " << ::min( c, d ) << std::endl;
	std::cout << "max( c, d ) = " << ::max( c, d ) << std::endl;
	return 0;
}
```

>>a = 3, b = 2
min(a, b) = 2
max(a, b) = 3
c = chaine2, d = chaine1
min(c, d) = chaine1
max(c, d) = chaine2


2) ###########

Files to turn in : Makefile, main.cpp, iter.{h, hpp}


Implement a function template iter that takes 3 parameters and returns nothing.
	• The first parameter is the address of an array.
	• The second one is the length of the array.
	• The third one is a function that will be called on every element of the array.

Your iter function template must work with any type of array. The third parameter
can be an instantiated function template.

int main()
{
    int array[4] = {0, 2, 4, 8};
    std::string	man[4] = {"bruh", "bro", "brother", "boy"};
    ::iter<std::string>(man, 4, ::show);
    ::iter<int>(array, 4, ::show);
}

>>
bruh
bro
brother
boy
0
2
4
8

