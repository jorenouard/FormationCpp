
1) #########

Files to turn in : Makefile, main.cpp, ClapTrap.{h, hpp}, ClapTrap.cpp

First, you have to implement a class! How original! It will be called ClapTrap and will have the following private attributes initialized to the values specified in brackets:
	• Name, which is passed as parameter to a constructor
	• Hit points (10), represent the health of the ClapTrap
	• Energy points (10)
	• Attack damage (0)

Add the following public member functions so the ClapTrap looks more realistic:

	• void attack(const std::string& target);
	• void takeDamage(unsigned int amount);
	• void beRepaired(unsigned int amount);

When ClapTrack attacks, it causes its target to lose <attack damage> hit points.
When ClapTrap repairs itself, it gets <amount> hit points back. 
Attacking and repairing cost 1 energy point each.
Of course, ClapTrap can’t do anything if it has no hit points or energy points left.

In all of these member functions, you have to print a message to describe what happens. 

For example, the attack() function may display something like (of course, without the angle brackets):

	'ClapTrap <name> attacks <target>, causing <damage> points of damage!'

The constructors and destructor must also display a message

```
#include <cstdlib>
#include <iostream>
#include "ClapTrap.hpp"

using std::cout;
using std::endl;

int main(void)
{
	ClapTrap Jubileus("Jubileus");
	ClapTrap Robert("Robert");

	cout << endl;

	Jubileus.attack("Robert");
	Robert.takeDamage(5);

	cout << endl;

	Jubileus.attack("Robert");
	Robert.takeDamage(1);

	cout << endl;

	Jubileus.attack("Robert");
	Robert.takeDamage(1);

	cout << endl;

	Robert.beRepaired(7);

	cout << endl;

	Jubileus.attack("Robert");
	Robert.takeDamage(10);

	cout << endl;

	return EXIT_SUCCESS;
}
```

ClapTrap Jubileus attacks Robert causing <amount> points of damage!
ClapTrap Robert took 5 points of damage

ClapTrap Jubileus attacks Robert causing <amount> points of damage!
ClapTrap Robert took 1 points of damage

ClapTrap Jubileus attacks Robert causing <amount> points of damage!
ClapTrap Robert took 1 points of damage

ClapTrap Robert has been repaired and gained 7 hit points

ClapTrap Jubileus attacks Robert causing <amount> points of damage!
ClapTrap Robert died

2) ########

Fichier a rendre : Files from previous exercise + ScavTrap.{h, hpp}, ScavTrap.cpp

Because you can never have enough ClapTraps, you will now create a derived robot.

It will be named ScavTrap and will inherit the constructors and destructor from ClapTrap.

However, its constructors, destructor and attack() will print different messages.

After all, ClapTraps are aware of their individuality.

Note that proper construction/destruction chaining must be shown in your tests.
When a ScavTrap is created, the program starts by building a ClapTrap. Destruction is in reverse order

ScavTrap will use the attributes of ClapTrap (update ClapTrap in consequence) and must initialize them to:
	• Name, which is passed as parameter to a constructor
	• Hit points (100), represent the health of the ClapTrap
	• Energy points (50)
	• Attack damage (20)

ScavTrap will also have its own special capacity:
	void guardGate();
This member function will display a message informing that ScavTrap is now in Gate keeper mode.

```
#include <cstdlib>
#include <iostream>
#include "ScavTrap.hpp"

using std::cout;
using std::endl;

int main(void)
{
	ScavTrap Jubileus("Jubileus");
	ScavTrap Robert("Robert");

	cout << endl;

	Jubileus.attack("Robert");
	Robert.takeDamage(5);

	cout << endl;

	Jubileus.attack("Robert");
	Robert.takeDamage(1);

	cout << endl;

	Jubileus.attack("Robert");
	Robert.takeDamage(1);

	//Jubileus.attack("Robert");
	//Robert.takeDamage(200);

	cout << endl;

	Robert.beRepaired(7);

	cout << endl;

	Jubileus.attack("Robert");
	Robert.takeDamage(10);

	cout << endl;

	Jubileus.guardGate();
	Robert.guardGate();

	cout << endl;

	return EXIT_SUCCESS;
}
```

ScavTrap Jubileus attacks Robert causing <amount> points of damage!
ClapTrap Robert took 5 points of damage

ScavTrap Jubileus attacks Robert causing <amount> points of damage!
ClapTrap Robert took 1 points of damage

ScavTrap Jubileus attacks Robert causing <amount> points of damage!
ClapTrap Robert took 1 points of damage

ClapTrap Robert has been repaired and gained 7 hit points

ScavTrap Jubileus attacks Robert causing <amount> points of damage!
ClapTrap Robert took 10 points of damage

ScarvTrap Jubileus is now in Gate keeper mode
ScarvTrap Robert is now in Gate keeper mode

3) ########

Files to turn in : Files from previous exercises + FragTrap.{h, hpp}, FragTrap.cpp


Now, implement a FragTrap class that inherits from ClapTrap. 
It is very similar to ScavTrap.
However, its construction and destruction messages must be different. 
Proper construction/destruction chaining must be shown in your tests.

When a FragTrap is created, the program starts by building a ClapTrap.
Destruction is in reverse order.
Same things for the attributes, but with different values this time:
	• Name, which is passed as parameter to a constructor
	• Hit points (100), represent the health of the ClapTrap
	• Energy points (100)
	• Attack damage (30)
FragTrap has a special capacity too:
	void highFivesGuys(void);

This member function displays a positive high fives request on the standard output.

```
#include <cstdlib>
#include <iostream>
#include "FragTrap.hpp"

using std::cout;
using std::endl;

int main(void)
{
	FragTrap John("John");
	FragTrap Albert("Albert");

	cout << endl;

	John.attack("Albert");
	Albert.takeDamage(30);

	cout << endl;

	John.attack("Albert");
	Albert.takeDamage(30);

	cout << endl;

	John.attack("Albert");
	Albert.takeDamage(30);

	cout << endl;

	John.attack("Albert");
	Albert.takeDamage(30);

	cout << endl;

	Albert.beRepaired(100);

	cout << endl;

	Albert.highFivesGuys();

	cout << endl;

	Albert.takeDamage(100);

	return EXIT_SUCCESS;
}
```

ClapTrap John attacks Albert causing <amount> points of damage!
ClapTrap Albert took 30 points of damage

ClapTrap John attacks Albert causing <amount> points of damage!
ClapTrap Albert took 30 points of damage

ClapTrap John attacks Albert causing <amount> points of damage!
ClapTrap Albert took 30 points of damage

ClapTrap John attacks Albert causing <amount> points of damage!
ClapTrap Albert died

ClapTrap Albert has been repaired and gained 100 hit points

FragTrap Albert says: High Fives!

ClapTrap Albert died

