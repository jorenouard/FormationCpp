1) ##########

Fichiers à rendre : Makefile, main.cpp, *.cpp, *.{h, hpp}

Les constructeurs et les destructeurs de chaque classe doivent afficher des messages qui
leur sont propres.
N’utilisez pas le même message pour toutes les classes.

Commencez par implémenter une classe simple de base Animal. Elle possède un attribut protégé :
	• std::string type;

Implémentez une classe Dog (chien) qui hérite de Animal.

Implémentez une classe Cat (chat) qui hérite de Animal.

Ces deux classes dérivées doivent initialiser leur type en fonction de leur nom.

Ainsi, le type de Dog sera “Dog”, et celui de Cat sera “Cat”.

Le type de la classe Animal peut être laissé vide ou initialisé avec la valeur de votre choix.
Chaque animal doit être capable d’utiliser la fonction membre :
	makeSound()
Elle affichera un son cohérent (les chats n’aboient pas).

Exécuter ce code devrait afficher les sons propres aux classes Dog et Cat, pas celui de la classe Animal.

```
int main()
{
	const Animal* dog = new Dog();
	const Animal* cat = new Cat();
	const Animal* meta_animal = new Animal();

	cout << dog->getType() << "-> "; 
	dog->makeSound();

	cout << cat->getType() << "-> "; 
	cat->makeSound();

	cout << endl;

	meta_animal->makeSound();

	cout << endl;
	return 0;
}

```

2) ##########

Fichiers à rendre : Fichiers de l’exercice précédent + *.cpp, *.{h, hpp}

Les constructeurs et les destructeurs de chaque classe doivent afficher des messages qui leur sont propres.

Implémentez une classe Brain (cerveau) contenant un tableau de 100 std::string appelé ideas (idées).
Ainsi, les classes Dog et Cat auront un attribut privé Brain*.
À la construction, les classes Dog et Cat créeront leur Brain avec new Brain();
À la destruction, les classes Dog et Cat devront delete leur Brain.

Dans votre fonction main, créez et remplissez un tableau d’objets Animal dont la moitié est composée d’objets Dog et l’autre moitié d’objets Cat.

À la fin de l’exécution du programme, parcourez ce tableau afin de delete chaque Animal.
Vous devez delete directement les chiens et les chats en tant qu’Animal.
Les destructeurs correspondants doivent être appelés dans le bon ordre.
N’oubliez pas de vérifier que vous n’avez pas de fuites de mémoire.
La copie d’un objet Dog ou d’un objet Cat ne doit pas être superficielle.
Par conséquent, vous devez vous assurer que vos copies sont bien des copies profondes.


```
int main()
{
	const Animal* j = new Dog();
	const Animal* i = new Cat();
	delete j;//should not create a leak
	delete i;

	return 0;
}
```